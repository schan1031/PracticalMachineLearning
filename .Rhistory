rm(list=ls())
data("ToothGrowth")
data(ToothGrowth)
View(ToothGrowth)
rm(list=ls())
data(ToothGrowth)
str(ToothGrowth)
View(ToothGrowth)
library(lattice)
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
View(ToothGrowth)
?xyplot
xyplot(len ~ supp | dose, ToothGrowth)
colnames(ToothGrowth) <- c("Length", "Supply", "Dosage")
View(ToothGrowth)
xyplot(Length ~ Supply | Dosage, ToothGrowth, )
xyplot(Length ~ Supply | Dosage, ToothGrowth, par.settings=simpleTheme(col="red")
xyplot(Length ~ Supply | Dosage, ToothGrowth, par.settings=simpleTheme(col="red"))
xyplot(Length ~ Supply | Dosage, ToothGrowth, auto.key = TRUE, par.settings=simpleTheme(col="red"))
xyplot(Length ~ Supply | Dosage, ToothGrowth, key = c("Dosage = 0.5"), par.settings=simpleTheme(col="red"))
xyplot(Length ~ Supply | Dosage, ToothGrowth, par.settings=simpleTheme(col="red"))
?t.test
t.test(Length[Supply = "OJ"], Length[Supply = "VC"], paired = FALSE, var.equal = FALSE)
Length <- ToothGrowth$Length
Supply <- ToothGrowth$Supply
Dosage <- ToothGrowth$Dosage
t.test(Length[Supply = "OJ"], Length[Supply = "VC"], paired = FALSE, var.equal = FALSE)
Supply <- ToothGrowth$Supply
t.test(Length[Supply == "OJ"], Length[Supply == "VC"], paired = FALSE, var.equal = FALSE)
t.test(Length[Dosage == 1], Length[Dosage == 2, paired = FALSE, var.equal = FALSE])
t.test(Length[Dosage == 1], Length[Dosage == 2], paired = FALSE, var.equal = FALSE])
t.test(Length[Dosage == 1], Length[Dosage == 2], paired = FALSE, var.equal = TRUE])
t.test(Length[Dosage == 1.0], Length[Dosage == 2.0], paired = FALSE, var.equal = TRUE])
t.test(Length[Dosage == 1.0], Length[Dosage == 2.0], paired = FALSE, var.equal = TRUE)
library(jsonlite)
library(rjson)
json_file <- "http://stats.nba.com/stats/playerdashptshotlog?DateFrom=&DateTo=&GameSegment=&LastNGames=0&LeagueID=00&Location=&Month=0&OpponentTeamID=0&Outcome=&Period=0&PlayerID=201939&Season=2015-16&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision="
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
jsondata[1]
steph <- json_data
steph[1]
steph[1:5]
steph[2]
steph[3]
data(mtcars)
head(mtcars
head(mtcars)
head(mtcars)
?factor
basemodel <- lm(mpg ~ am, data = mtcars)
summary(basemodel)
model <- lm(mpg ~ cyl + hp + wt + am, data = mtcars)
summary(model)
library(lattice)
data(mtcars)
head(mtcars)
mtcars$cyl <- facto(mtcars$cyl)
mtcars$vs <- facto(mtcars$vs)
mtcars$gear <- facto(mtcars$gear)
mtcars$am   <- factor(mtcars$am,labels=c("Automatic","Manual"))
basemodel <- lm(mpg ~ am, data = mtcars)
model <- lm(mpg ~ cyl + hp + wt + am, data = mtcars)
summary(basemodel)
summary(model)
library(lattice)
data(mtcars)
head(mtcars)
mtcars$cyl <- facto(mtcars$cyl)
mtcars$vs <- facto(mtcars$vs)
mtcars$gear <- facto(mtcars$gear)
mtcars$am <- factor(mtcars$am, labels = c("Automatic","Manual"))
basemodel <- lm(mpg ~ am, data = mtcars)
model <- lm(mpg ~ cyl + hp + wt + am, data = mtcars)
summary(basemodel)
summary(model)
par(mfrow = c(2, 2))
plot(model)
boxplot(mpg ~ am, data = mtcars, ylab = "Transmission Type", xlab = "MPG", main = "Transmission Type vs. Miles Per Gallon")
histogram(mpg ~ am, data = mtcars)
histogram(mpg ~ cyl, data = mtcars)
histogram(mpg ~ wt, data = mtcars)
histogram(mpg ~ hp, data = mtcars)
rm(list=ls())
library(lattice)
data(mtcars)
head(mtcars)
mtcars$cyl <- facto(mtcars$cyl)
mtcars$vs <- facto(mtcars$vs)
mtcars$gear <- facto(mtcars$gear)
mtcars$am <- factor(mtcars$am, labels = c("Automatic","Manual"))
basemodel <- lm(mpg ~ am, data = mtcars)
model <- lm(mpg ~ cyl + hp + wt + am, data = mtcars)
summary(basemodel)
summary(model)
ar(mfrow = c(2, 2))
plot(model)
par(mfrow = c(2, 2))
plot(model)
t.test(mpg ~ am, data = mtcars)
boxplot(mpg ~ am, data = mtcars, ylab = "Transmission Type", xlab = "MPG", main = "Transmission Type vs. Miles Per Gallon")
histogram(mpg ~ am, data = mtcars)
data1 <- fromJSON("http://stats.nba.com/stats/playerdashptshotlog?DateFrom=&DateTo=&GameSegment=&LastNGames=0&LeagueID=00&Location=&Month=0&OpponentTeamID=0&Outcome=&Period=0&PlayerID=202322&Season=2015-16&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=")
library(jsonlite)
data1 <- fromJSON("http://stats.nba.com/stats/playerdashptshotlog?DateFrom=&DateTo=&GameSegment=&LastNGames=0&LeagueID=00&Location=&Month=0&OpponentTeamID=0&Outcome=&Period=0&PlayerID=202322&Season=2015-16&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=")
colnames(data1)
data1
data1[1]
data1[2]
data1[1][1]
data1[2][1]
data1[2][1][1]
data[3]
data1[3]
data <- fromJSON("http://stats.nba.com/stats/playerdashptshotlog?DateFrom=&DateTo=&GameSegment=&LastNGames=0&LeagueID=00&Location=&Month=0&OpponentTeamID=0&Outcome=&Period=0&PlayerID=202322&Season=2015-16&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=")
data[3][1]
data[1]
data[2]
library(jsonlite)
library(curl)
install.packages("curl")
install.packages("curl")
data <- fromJSON(curl("http://stats.nba.com/stats/playerdashptshotlog?DateFrom=&DateTo=&GameSegment=&LastNGames=0&LeagueID=00&Location=&Month=0&OpponentTeamID=0&Outcome=&Period=0&PlayerID=202322&Season=2015-16&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision="))
data[1]
data[2]
data[2][1]
data[2[1]
data[2[1]]
data{1}
data[[1]]
data[[2]]
head(data[[2]], n = 3)
data[[2]][1]
a <- data[[2]][1]
a <- data.frame(data[[2]][1])
View(a)
a <- data.frame(data[[3]][1])
a
a <- data.frame(data[3][1])
a
a <- data.frame(data[[3][1])
library(jsonlite)
a <- data.frame(data[[3]][1])
a
a <- data.frame(data[[3]][2])
a
a <- data.frame(data[[3]][2][1])
a
a <- data.frame(data[[3]][[2]])
a
View(a)
a <- data.frame(data[[3]][2])
b <- data.frame(data[[3]][[3])
b <- data.frame(data[[3]][[3])
b <- data.frame(data[[3]][[3]])
View(b)
View(b)
View(a)
a <- data.frame(data[[3]][[2]])
colnames(b) <- a[1:19]
colnames(b) <- a[1:19,]
View(b)
library(lattice)
View(b)
xyplot(PERIOD ~ DRIBBLES, b)
histogram
histogram(PERIOD ~ DRIBBLES, b)
xyplot(CLOSEST_DEF_DIST ~ FGM, b)
xyplot(CLOSE_DEF_DIST ~ FGM, b)
?xyplot
xyplot(PTS_TYPE ~ SHOT_RESULT, b)
histogram(PTS_TYPE ~ SHOT_RESULT, b)
histogram(PTS_TYPE | SHOT_RESULT, b)
histogram(PTS_TYPE ~ SHOT_RESULT, b)
dotplot(PTS_TYPE ~ SHOT_RESULT, b)
xyplot(SHOT_DIST ~ FGM, b)
histogram(SHOT_DIST ~ FGM, b)
hist(b$SHOT_DIST)
histogram(SHOT_DIST,b)
b$SHOT_DIST
histogram(SHOT_DIST ,b)
histogram(SHOT_DIST ,data = b)
?hist
shot <- b$SHOT_DIST
hist(shot)
shot <- data.frame(b$SHOT_DIST)
hist(shot)
View(shot)
hist(shot$b.SHOT_DIST)
shot <- as.numeric(b$SHOT_DIST)
hist(shot)
b$SHOT_DIST
shot
shot <- b$SHOT_DIST
hist(table(shot)
hist(table(shot))
View(b)
url <- 'http://www.basketball-reference.com/leagues/NBA_2014.html'
css_page <- '#team'
url %>>%
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
total_table %>>%
filter(X.1 == 'Rk') %>>% as.character -> names
'Rk' %>>% grep(x = total_table$X.1) -> row_of_header #find where rank is
names %>>% tolower -> names(total_table)
names(total_table) %>>% (gsub('\\%|/','\\.',.)) -> names(total_table)
(row_of_header + 1) %>>% (total_table[.:nrow(total_table),]) -> total_table #skip that row and go to the end row and go to the end
total_table %>>% head
install.packages('rvest')
url <- 'http://www.basketball-reference.com/leagues/NBA_2014.html'
css_page <- '#team'
url %>>%
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
total_table %>>%
filter(X.1 == 'Rk') %>>% as.character -> names
'Rk' %>>% grep(x = total_table$X.1) -> row_of_header #find where rank is
names %>>% tolower -> names(total_table)
names(total_table) %>>% (gsub('\\%|/','\\.',.)) -> names(total_table)
(row_of_header + 1) %>>% (total_table[.:nrow(total_table),]) -> total_table #skip that row and go to the end row and go to the end
total_table %>>% head
url <- 'http://www.basketball-reference.com/leagues/NBA_2014.html'
css_page <- '#team'
url %>>%
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
install.packages(pipeR)
install.packages('pipeR')
url <- 'http://www.basketball-reference.com/leagues/NBA_2014.html'
css_page <- '#team'
url %>>%
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
library(pipeR)
library(rvest)
url <- 'http://www.basketball-reference.com/leagues/NBA_2014.html'
css_page <- '#team'
url %>>%
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
total_table %>>%
install.packages('dplyr')
library(dplyr)
url <- 'http://www.basketball-reference.com/leagues/NBA_2014.html'
css_page <- '#team'
url %>>%
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
total_table %>>%
rm(list=ls())
library(pipeR)
library(rvest)
library(dplyr)
url <- 'http://www.basketball-reference.com/leagues/NBA_2014.html'
css_page <- '#team'
url %>>%
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
total_table %>>%
filter(X.1 == 'Rk') %>>% as.character -> names
'Rk' %>>% grep(x = total_table$X.1) -> row_of_header #find where rank is
names %>>% tolower -> names(total_table)
names(total_table) %>>% (gsub('\\%|/','\\.',.)) -> names(total_table)
(row_of_header + 1) %>>% (total_table[.:nrow(total_table),]) -> total_table #skip that row and go to the end row and go to the end
total_table %>>% head
View(total_table)
url <- 'http://www.basketball-reference.com/players/b/butleji01/gamelog/2016/'
css_page <- '#team'
url %>>%
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
total_table %>>%
filter(X.1 == 'Rk') %>>% as.character -> names
'Rk' %>>% grep(x = total_table$X.1) -> row_of_header #find where rank is
names %>>% tolower -> names(total_table)
names(total_table) %>>% (gsub('\\%|/','\\.',.)) -> names(total_table)
(row_of_header + 1) %>>% (total_table[.:nrow(total_table),]) -> total_table #skip that row and go to the end row and go to the end
total_table %>>% head
url <- 'http://www.basketball-reference.com/leagues/NBA_2014.html'
css_page <- '#team'
url %>>%
html %>>%
html_nodes(css_page) %>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
total_table %>>%
filter(X.1 == 'Rk') %>>% as.character -> names
'Rk' %>>% grep(x = total_table$X.1) -> row_of_header #find where rank is
names %>>% tolower -> names(total_table)
names(total_table) %>>% (gsub('\\%|/','\\.',.)) -> names(total_table)
(row_of_header + 1) %>>% (total_table[.:nrow(total_table),]) -> total_table #skip that row and go to the end row and go to the end
total_table %>>% head
View(total_table)
library(pipeR)
library(rvest)
library(dplyr)
library(rvest)
dd <- html_session("http://www.basketball-reference.com/players/b/butleji01/gamelog/2016/") %>%
html_node("table#stats") %>%
html_table()
rm(list=ls())
html_table()
library(pipeR)
library(rvest)
library(dplyr)
library(rvest)
dd <- html_session("http://www.basketball-reference.com/players/j/jamesle01/splits/") %>%
html_node("table#stats") %>%
html_table()
View(dd)
View(dd)
monthdata <- dd[12:19,]
View(monthdata)
colnames(monthdata) <- dd[12,]
View(monthdata)
rm(list=ls())
library(pipeR)
library(rvest)
library(dplyr)
library(lattice)
library(rvest)
library(dplyr)
library(lattice)
library(rvest)
dd <- html_session("http://www.basketball-reference.com/players/j/jamesle01/splits/") %>%
html_node("table#stats") %>%
html_table()
monthdata <- dd[13:19,]
colnames(monthdata) <- dd[12,]
View(monthdata)
xyplot(PTS | TRB | AST ~ Value, monthdata)
xyplot(PTS ~ Value, monthdata)
xyplot(PTS ~ GP, monthdata)
xyplot(PTS ~ G, monthdata)
install.packages('caret')
library(caret)
setwd("~/PracticalMachineLearning")
training <- read.csv('pml-training.csv')
View(training)
View(training)
training$classe
traindata <- read.csv('pml-training.csv')
testdata <- read.csv('pml-testing.csv')
View(testdata)
traindata <- traindata[2:end,]
traindata <- traindata[2:length(traindata),]
traindata <- read.csv('pml-training.csv')
traindata <- traindata[,2:length(traindata)]
View(traindata)
View(training)
headerindex <- c(3,5:9,35:47,58:66,82:84)
traindata <- traindata[,headerindex]
View(traindata)
headerindex <- c(3, 5:9, 36:48, 59:67, 83:85)
traindata <- traindata[,headerindex]
headerindex <- c(3, 5:9, 36:48, 58:66, 82:84)
traindata <- traindata[,headerindex]
traindata <- read.csv('pml-training.csv')
headerindex <- c(3, 5:9, 36:48, 58:66, 82:84)
traindata <- traindata[,headerindex]
View(traindata)
traindata <- read.csv('pml-training.csv')
traindata[,36]
headerindex <- c(3, 5:9, 37:49, 58:66, 82:84)
traindata2 <- traindata[,headerindex]
View(traindata2)
View(traindata)
headerindex <- c(4, 7:11, 37:49, 60:68, 84:86)
traindata2 <- traindata[,headerindex]
View(traindata2)
train = createDataPartition(traindata$classe, p = 0.75, list = FALSE)
training = data[train,]
testing = data[-train,]
View(traindata)
traindata2$class <- traindata$classe
train = createDataPartition(traindata2$class, p = 0.75, list = FALSE)
training = data[train,]
testing = data[-train,]
rm(list=ls())
library(caret)
set.seed(12345)
traindata <- read.csv('pml-training.csv')
testdata <- read.csv('pml-testing.csv')
# Clean the Data from Columns of NAs and Blanks
headerindex <- c(4, 7:11, 37:49, 60:68, 84:86)
traindata2 <- traindata[,headerindex]
traindata2$class <- traindata$classe
# Split the Training Data into Temporary Training and Test Sets
train = createDataPartition(traindata2$class, p = 0.75, list = FALSE)
training = data[train,]
testing = data[-train,]
# Split the Training Data into Temporary Training and Test Sets
train <- createDataPartition(traindata2$class, p = 0.75, list = FALSE)
training <- data[train,]
testing <- data[-train,]
View(traindata2)
training <- traindata2[train,]
testing <- traindata2[-train,]
outcome <- which(names(training) == "class")
highCorrCols <- findCorrelation(abs(cor(training[,-outcome])),0.90)
highCorrFeatures <- names(training)[highCorrCols]
training <- training[,-highCorrCols]
outcome <-  which(names(training) == "class")
outcome
?train
names(getModelInfo())
model <- train(type ~., data = training, method = "bag")
model <- train(type ~., data = training, method = "glm")
model <- train(class ~., data = training, method = "glm")
library(rattle)
library(rpart.plot)
library(randomForest)
install.packages('rattle', 'rpart.plot', 'randomForest')
install.packages('rattle')
install.packages('randomForest')
install.packages('rpart')
library(rpart.plot)
library(randomForest)
library(rattle)
model <- train(class ~., data = training, method = "glm")
install.packages('e1071', dependencies=TRUE)
model <- train(class ~., data = training, method = "glm")
rm(list=ls())
library(caret)
library(rattle)
library(rpart)
library(randomForest)
set.seed(12345)
traindata <- read.csv('pml-training.csv')
testdata <- read.csv('pml-testing.csv')
# Clean the Data from Columns of NAs and Blanks
headerindex <- c(4, 7:11, 37:49, 60:68, 84:86)
traindata2 <- traindata[,headerindex]
traindata2$class <- traindata$classe
# Split the Training Data into Temporary Training and Test Sets
train <- createDataPartition(traindata2$class, p = 0.75, list = FALSE)
training <- traindata2[train,]
testing <- traindata2[-train,]
# Train
model <- train(class ~., data = training, method = "glm")
View(training)
model <- randomForest(class ~. , data = training)
model
predictions <- predict(model, testing, type = "class")
confusionMatrix(predictionsB1, myTesting$classe)
confusionMatrix(predictions, testing$class)
modtree <- train(class ~. , method = "rpart", data = training)
predicttree <- predict(modtree, testing, type = "class")
predicttree <- predict(modtree, testing$class)
?predict
predicttree <- predict(modtree, testing)
confusionMatrix(predicttree, testing$class)
plot(modtree$finalModel)
text(modtree$finalModel, use.n = TRUE, all = TRUE)
fancyRpartPlot(modtree)
confusionMatrix(predictions, testing$class)
modbag <- train(class ~. , method = "treebag", data = training)
warnings()
modbag <- train(class ~. , method = "bagEarth", data = training)
print(confusionMatrix(predicttree, testing$class))
View(testdata)
testdata2 <- testdata[,headerindex]
testdata2 <- testdata$classe
testdata2 <- testdata[,headerindex]
testdata2 <- testdata$classe
testdata2 <- testdata[,headerindex]
View(testdata2)
finalpredictions <- predict(model, testdata2, type = "class")
finalpredictions
plot(model$finalModel)
library(rpart.plot)
# Split the Training Data into Temporary Training and Test Sets
fancyRpartPlot(modtree)
predicttree <- predict(modtree, testing, type = "class")
predicttree <- predict(modtree, testing, type = class)
predicttree <- predict(modtree, testing)
print(confusionMatrix(predicttree, testing$class))
print(confusionMatrix(predicttree, testing$class))
print(confusionMatrix(predictions, testing$class))
finalpredictions <- predict(model, testdata2, type = "class")
finalpredictions
model <- randomForest(class ~. , data = training)
getTree(model, 1, labelVar=TRUE)
head(getTree(model, 1, labelVar=TRUE))
head(getTree(model, 1, labelVar=TRUE),20)
